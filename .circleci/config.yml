version: 2.1

executors:
  build-executor:
    docker:
      - image: opennms/build-env:1.0-b5
        environment:
          MAVEN_OPTS: -Xmx2g

  build-debian-executor:
    docker:
      - image: circleci/openjdk:8u212-jdk-stretch
        environment:
          MAVEN_OPTS: -Xmx2g

  # Note: Need to investigate how we can use our own image and have it configured so we can run docker inside docker
  # rather than rely on the circleci machine VM
  smoke-test-executor:
    machine: true
    environment:
      MAVEN_OPTS: -Xmx3200m
      TESTCONTAINERS_RYUK_DISABLED: true
      KEEP_TMP_OVERLAY: true
      TEST_RECORDING_DIR: /tmp/test-recordings

  docs-executor:
    docker:
      - image: antora/antora:2.0.0

  netlify-cli-executor:
    docker:
      - image: opennms/netlify-cli:2.8.3-b1

  package-cloud-cli-executor:
    docker:
      - image: opennms/package-cloud-cli:0.3.05-b1

  python-executor:
    docker:
      - image: circleci/python:3.7.2

workflows:
  build-deploy:
    jobs:
      # Run build jobs for all branches and any tag
      - pre-build:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - pre-build
          filters:
            tags:
              only: /.*/
      - build-debian:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - build-docs:
          requires:
            - pre-build
          filters:
            tags:
              only: /.*/
      - smoke-test-commit:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      # Run deploy jobs on version tags, release branches and develop
      - deploy-maven:
          requires:
            - smoke-test-commit
          filters:
            # Maven deploy requires GPG signing for releases - we do this manually
            branches:
              only:
                - develop
                - /release-.*/
      - deploy-packages:
          requires:
            - smoke-test-commit
            - build-debian
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - develop
                - /release-.*/
      - deploy-docs:
          requires:
            - build-docs
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - develop
                - /release-.*/
      - yank-snapshot-packages:
          requires:
            - deploy-packages

  nightly:
    triggers:
    - schedule:
        # Run daily @ 5:00am UTC
        cron: "0 5 * * *"
        filters:
          branches:
            only:
            - develop
            - /release-.*/
    jobs:
    - pre-build:
        filters:
          tags:
            only: /.*/
    - build:
        requires:
        - pre-build
        filters:
          tags:
            only: /.*/
    - smoke-test-nightly:
        requires:
        - build
        filters:
          tags:
            only: /.*/

commands:
  smoke-test:
    description: "Run the smoke tests"
    parameters:
      context:
        type: string
    steps:
      - attach_workspace:
          at: ~/

        # Link root user's m2 repo from the cache with our user's m2 repo (the circleci user)
      - run:
          name: Link maven repo with cache
          command: |
            sudo chmod 777 /root
            ln -s /root/.m2 ~/.m2

      - restore_cache:
          keys:
          # attempt to use the cache from the last smoke-test run
          - v2-smoke-dependencies-{{ checksum "smoke-test/pom.xml" }}-{{ checksum "pom.xml" }}
          # use the cache built for the same root pom
          - v5-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v5-dependencies-

      - restore_cache:
          keys:
          - v1-docker-{{ checksum "smoke-test/src/main/resources/docker_fixed_images" }}

      - run:
          name: Import docker images
          command: |
            if [ -z "$(ls /tmp/docker 2> /dev/null)" ]; then exit 0; fi
            source smoke-test/src/main/resources/docker_fixed_images
            for dockerTargz in $(ls /tmp/docker); do
              dockerName="${dockerTargz%.*}"
              echo "Importing ${!dockerName} from $dockerTargz"
              docker load --input /tmp/docker/"$dockerTargz"
            done
            docker image ls

      - run:
          name: Run the tests
          command: |
            mkdir $TEST_RECORDING_DIR
            mvn install --projects org.opennms.alec:smoke-test --also-make -DskipTests=true
            cd smoke-test
            if [ "<< parameters.context >>" = "commit" ]; then
              mvn surefire:test -Dtest=OnCommitSmokeTestSuite -DsmokeTest=true
            elif [ "<< parameters.context >>" = "nightly" ]; then
              mvn test -DsmokeTest=true
            fi

      - save_cache:
          paths:
          - /root/.m2
          key: v2-smoke-dependencies-{{ checksum "smoke-test/pom.xml" }}-{{ checksum "pom.xml" }}

      - run:
          name: Save cacheable Docker images
          command: |
            if [ -d /tmp/docker ]; then exit 0; fi
            mkdir /tmp/docker
            tagsFile="smoke-test/src/main/resources/docker_fixed_images"
            source "$tagsFile"
            for dockerImg in $(awk -F '=' '/^[^#]/ {print $1}' "$tagsFile"); do
              echo "Saving docker image ${!dockerImg} as ${dockerImg}.tgz"
              docker save -o /tmp/docker/"$dockerImg".tgz "${!dockerImg}"
            done

      - save_cache:
          paths:
          - /tmp/docker
          key: v1-docker-{{ checksum "smoke-test/src/main/resources/docker_fixed_images" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/logs

      # Unfortunately I can't reference the env variable containing the recording path here so I have to
      # duplicate it
      - store_artifacts:
          path: /tmp/test-recordings

      # Future Improvements:
      # - Store the logs from the sentinel and OpenNMS containers for the test run in addition to the junit logs
      #   - Mount the logs directories from the containers so we can copy the logs out easier
      # - Add nightly test run back once tests are proven stable
      #   - We might want to test nightly against the floating (latest) images for opennms and sentinel

jobs:
  pre-build:
    executor: build-executor
    steps:
      - checkout

      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build:
    executor: build-executor
    steps:
      - attach_workspace:
          at: ~/

      - restore_cache:
          keys:
          - v5-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v5-dependencies-

      - run:
          name: Build
          command: |
            mvn -DskipTests -Dbuild.packages clean install dependency:resolve-plugins dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v5-dependencies-{{ checksum "pom.xml" }}

      - run:
          name: Run the tests
          command: |
            mvn test integration-test

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

      - run:
          name: Gather artifacts
          command: |
            mkdir -p ~/dist/
            cp assembly/opennms-rpm/target/rpm/opennms-alec-plugin/RPMS/noarch/* ~/dist/
            cp assembly/sentinel-rpm/target/rpm/sentinel-alec-plugin/RPMS/noarch/* ~/dist/
          when: always

      - store_artifacts:
          path: ~/dist
          destination: dist

      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build-debian:
    executor: build-debian-executor

    steps:
      - attach_workspace:
          at: ~/

      - restore_cache:
          keys:
          # Use a separate cache, since the the other build image runs as root
          - v4-deb-dependencies-{{ checksum "pom.xml" }}
          - v4-deb-dependencies-

      - run:
          name: Build Debian packages
          command: |
            mvn install --projects org.opennms.alec.assembly:org.opennms.alec.assembly.opennms.deb,org.opennms.alec.assembly:org.opennms.alec.assembly.sentinel.deb --also-make -DskipTests=true -Dbuild.packages

      - save_cache:
          paths:
            - ~/.m2
          key: v4-deb-dependencies-{{ checksum "pom.xml" }}

      - run:
          name: Gather artifacts
          command: |
            mkdir -p ~/dist/
            cp assembly/opennms-deb/target/opennms-alec-plugin_*.deb ~/dist/
            cp assembly/sentinel-deb/target/sentinel-alec-plugin_*.deb ~/dist/

      - store_artifacts:
          path: ~/dist
          destination: dist

      - persist_to_workspace:
          root: ~/
          paths:
            - project/assembly/

  smoke-test-commit:
    executor: smoke-test-executor

    steps:
    - smoke-test:
        context: commit

  smoke-test-nightly:
    executor: smoke-test-executor

    steps:
    - smoke-test:
        context: nightly

  build-docs:
    executor: docs-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate HTML output for documentation
          command: |
            antora generate site.yml

      - store_artifacts:
          path: build/site.zip
          destination: site.zip

      - persist_to_workspace:
          root: ~/
          paths:
            - project/public
            - project/build

  deploy-maven:
    executor: build-executor
    steps:
      - attach_workspace:
          at: ~/
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v5-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v5-dependencies-

      - run:
          name: Deploy the artifacts
          command: |
            mvn -s .circleci.settings.xml -DskipTests deploy

  deploy-packages:
      executor: package-cloud-cli-executor
      steps:
        - attach_workspace:
            at: ~/
        - run:
            name: Push RPM packages
            command: |
              source .circleci/env/package_cloud
              package_cloud push ${PACKAGECLOUD_USER}/${PACKAGECLOUD_REPO}/${PACKAGECLOUD_RPM_DISTRO_VERSION} assembly/opennms-rpm/target/rpm/opennms-alec-plugin/RPMS/noarch/*
              package_cloud push ${PACKAGECLOUD_USER}/${PACKAGECLOUD_REPO}/${PACKAGECLOUD_RPM_DISTRO_VERSION} assembly/sentinel-rpm/target/rpm/sentinel-alec-plugin/RPMS/noarch/*
              package_cloud push ${PACKAGECLOUD_USER}/${PACKAGECLOUD_REPO}/${PACKAGECLOUD_DEB_DISTRO_VERSION} assembly/opennms-deb/target/opennms-alec-plugin_*.deb
              package_cloud push ${PACKAGECLOUD_USER}/${PACKAGECLOUD_REPO}/${PACKAGECLOUD_DEB_DISTRO_VERSION} assembly/sentinel-deb/target/sentinel-alec-plugin_*.deb
  deploy-docs:
    executor: netlify-cli-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy docs to Netlify
          command: |
            netlify deploy --prod -d public -s ${NETLIFY_SITE_ID}

  yank-snapshot-packages:
    executor: python-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Yank SNAPSHOT packages
          command: |
            source .circleci/env/package_cloud
            .circleci/scripts/packagecloud-yank-snapshot-packages.py
